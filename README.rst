==============================================
Antidox: Use Doxygen sanely from within Sphinx
==============================================

---------------------------
An antidote to doxy-madness
---------------------------

Note: currently under development
=================================

This software is currently under development and in alpha phase. This means all
work is being done on `master`, which may break, and APIs may change, all while
keeping version 0.1.1.

As soon as it is deemed stable enough, the version will be bumped to 0.1.2 and
this notice will be removed.

Summary
=======

``antidox`` is a Sphinx extension that can read Doxygen XML "databases" and insert
documentation for entities in sphinx documents.

It is intended to be *fast* and simple, though *easily customizable*.

Document generation (i.e. conversion between doxy-xml and reStructuredText) is
driven by XML stylesheets (powered by lxml_, while indexing and selection of
documentable entities is done by a SQL database (sqlite3_).

Objectives
==========

* Reuse API docs made with Doxygen in a Sphinx project.
* Provide a smooth transition between 100% automatic API docs (what Doxygen
  generates) and semi-manual documentaion.
* Have sensible defaults for automatic documentation generation while allowing
  customization.
* Deal with big projects efficiently: the main tool in use now (Breathe)
  has resource usage issues when dealing with large XML files.

Functionality
=============

Directives and roles
--------------------

References
----------

The standard way to refer to entities in antidox is by `file_path::entity_name``,
where ``file_path`` is base name of the file, along with enough directory
components to make the path unique (similar to the default setting in Doxygen)

Configuration variables
-----------------------

Customization
-------------

TODO: In the future it will be possible to tell antidox to use a user-supplied
xsl template, and also to inherit from the default template.

Implemetation Overview
======================

``antidox.doxy``
----------------

This module reads in all doxygen XML files and constructs a (in-memory) SQL
database that serves as index. We will be performing more or less complex
queries into a graph of objects; using SQL avoids having to hand-craft all
that logic.

To work around C's lack of namespaces, the `doxy` module defines a
human-readable `Target` string that can be used to uniquely refer to a
documented C construct, even if the name is defined in multiple files.

The first document to be read is ``index.xml``. Then the rest of the documents
are read only to determine hierarchy relationships.

``antidox.directive``
---------------------

The main functionality of the module (on the python side) is implemented as a
directive that fetches the XML generated by doxygen, runs a XSL transform (in
memory) and converts the resulting XML element tree into reST nodes.

``compound.xsl``
----------------

The code in ``antidox.directive`` is a fairly generic mechanism. The "policy"
specifying how the XML is converted is coded entirely as a stylesheet.

There are a couple of antidox-specific nodes that are used for directives, roles
and translations because those are not implemented by nodes on the reST side.


Design philosophy
=================

Doxygen is a great tool for parsing C code and extracting all kinds of
entities. Unfortunately, the output is a bit messy, because it is not
hierarchical: Groups are hierarchical, but entities also appear in file
compounds, and on their own (structs, for example). This means that if Doxygen
XML files are directly mapped to rst documents, one ends up with loads of
duplicate definitions.

Also, Doxygen seems to make a lot of decisions in what it considers to be a
top-level entity and what not (of course, it's heavily influenced by C++
concepts).

C does not have the concept of packages/modules, it's up to the programmer that
is commenting the code to define those abstraction by using ``@ingroup``
directives. Some package documentation ends up in file compounds and some other
in groups. To make matters worse, a group does not have a fixed definition.

This tool tries to reduce Doxygen to a tool for parsing code and comments and
to give documentation writers explicit control over the layout and placement of
the different entities.


TODO
====

* It would be good to have a way of detecting that a XML file has not changed
  to avoid generating it again.
* Autoindex functionality.
* Custom templates.
* Document custom XML nodes (antidox namespace).

.. _lxml: https://lxml.de/
.. _sqlite3: https://docs.python.org/3/library/sqlite3.html
