Module contents
===============

``antidox.doxy``
----------------

This module reads in all doxygen XML files and constructs a (in-memory) SQL
database that serves as index. We will be performing more or less complex
queries into a graph of objects; using SQL avoids having to hand-craft all
that logic.

To work around C's lack of namespaces, the `doxy` module defines a
human-readable `Target` string that can be used to uniquely refer to a
documented C construct, even if the name is defined in multiple files.

The first document to be read is ``index.xml``. Then the rest of the documents
are read only to determine hierarchy relationships.

``antidox.directive``
---------------------

The main functionality of the module (on the python side) is implemented as a
directive that fetches the XML generated by doxygen, runs a XSL transform (in
memory) and converts the resulting XML element tree into reST nodes.

``compound.xsl``
----------------

The code in ``antidox.directive`` is a fairly generic mechanism. The "policy"
specifying how the XML is converted is coded entirely as a stylesheet.

There are a couple of antidox-specific nodes that are used for directives, roles
and translations because those are not implemented by nodes on the reST side.
